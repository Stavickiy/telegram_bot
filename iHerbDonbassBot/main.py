import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, WebAppInfo, ReplyKeyboardMarkup
import requests
import logging
import asyncio
from dotenv import load_dotenv

from iHerbDonbassBot.funcs import pluralize, split_list
from iHerbDonbassBot.data import NUMBERS, CATEGORIES

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.environ.get('TOKEN', 'MY_TOKEN')
API_BASE_URL = os.environ.get('API_BASE_URL', 'MY_API_BASE_URL')
PRODUCTS_BASE_URL = os.environ.get('PRODUCTS_BASE_URL', 'MY_PRODUCTS_BASE_URL')
ADMIN_USER_NAME = os.environ.get('ADMIN_USER_NAME', 'MY_ADMIN_USER_NAME')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()


def start_menu():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω –∏ —Ä–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫–∞–º–∏.

    Returns:
        tuple: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∏ —Ä–µ–ø–ª–∞–π —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫.
    """
    inline_keyboard = [
        [InlineKeyboardButton(text="üóÇÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='categories'),
         InlineKeyboardButton(text="üè∑Ô∏è–ë—Ä–µ–Ω–¥—ã", callback_data='brands')],
    ]

    reply_keyboard = [
        [
            KeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            KeyboardButton(text="üåê–ù–∞—à —Å–∞–π—Ç", web_app=WebAppInfo(url='https://herbdonbass.ru/'))
        ],
    ]

    inline_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    reply_markup = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True)

    return inline_markup, reply_markup


async def preparation_products(callback_query, products: list) -> None:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        callback_query (types.CallbackQuery): Callback query –æ–±—ä–µ–∫—Ç.
        products (list): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    """
    for prod in products:
        try:
            final_price = f"<s>{prod['final_price']}</s>" if prod['discount'] else ''.join(
                [NUMBERS[n] for n in str(prod['final_price'])])
            sale_price = ''.join([NUMBERS[n] for n in str(prod['sale_price'])]) if prod['discount'] else ''
            product_title = f"""
                <b>{prod['title']}</b>
                {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if prod['count'] else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
                <u>–¶–µ–Ω–∞:</u> {final_price} {sale_price}‚ÇΩ
                """
            product_url = PRODUCTS_BASE_URL + prod['absolute_url']

            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì©–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"t.me/{ADMIN_USER_NAME}")],
                [InlineKeyboardButton(text="üîç–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=product_url)]
            ])

            if 'image_url' in prod:
                image_url = 'https://herbdonbass.ru' + prod['image_url']
                print(image_url)
                await callback_query.message.answer_photo(photo=image_url, caption=product_title, parse_mode='HTML',
                                                          reply_markup=inline_kb)
            else:
                await callback_query.message.answer(text=product_title, parse_mode='HTML', reply_markup=inline_kb)
        except Exception as e:
            print(f'–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π {prod} \n –û—à–∏–±–∫–∞: {e}')

    await callback_query.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(products)} {pluralize(len(products), one='–ø—Ä–æ–¥—É–∫—Ç', few='–ø—Ä–æ–¥—É–∫—Ç–∞', many='–ø—Ä–æ–¥—É–∫—Ç–æ–≤')}")


@dp.message(Command("start"))
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é.

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    inline_keyboard, reply_keyboard = start_menu()
    await message.answer_photo(photo='https://herbdonbass.ru/media/img/snapedit_1720093314558.jpg', caption='',
                               parse_mode='HTML')
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=inline_keyboard)
    await message.answer(text="–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –æ—Ç–∫—Ä—ã–≤ –º–µ–Ω—é", reply_markup=reply_keyboard)


@dp.callback_query(lambda c: c.data in ['categories', 'brands'])
async def handle_main_menu(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        callback_query (types.CallbackQuery): Callback query –æ–±—ä–µ–∫—Ç.
    """
    await callback_query.message.edit_reply_markup(reply_markup=None)

    if callback_query.data == 'categories':
        response = requests.get(f"{API_BASE_URL}/categories/")
        categories = response.json()

        buttons = [InlineKeyboardButton(text=CATEGORIES[cat['name']] if cat['name'] in CATEGORIES else cat['name'],
                                        callback_data=f"category_{cat['id']}") for cat in categories]
        buttons.append(InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back_to_start'))
        keyboard = InlineKeyboardMarkup(inline_keyboard=split_list(buttons))

        await callback_query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    elif callback_query.data == 'brands':
        response = requests.get(f"{API_BASE_URL}/brands/")
        brands = response.json()

        buttons = [
            InlineKeyboardButton(text=CATEGORIES[brand['name']] if brand['name'] in CATEGORIES else brand['name'],
                                 callback_data=f"brand_{brand['id']}") for brand in brands]
        buttons.append(InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back_to_start'))
        keyboard = InlineKeyboardMarkup(inline_keyboard=split_list(buttons))

        await callback_query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith('category_'))
async def handle_category(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        callback_query (types.CallbackQuery): Callback query –æ–±—ä–µ–∫—Ç.
    """
    await callback_query.message.edit_reply_markup(reply_markup=None)

    category_id = callback_query.data.split('_')[1]
    response = requests.get(f"{API_BASE_URL}/categories/{category_id}/vitamins/")
    products = response.json()

    await preparation_products(callback_query, products)

    back_button = [InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data='categories')]
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[back_button])
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_keyboard)


@dp.callback_query(lambda c: c.data.startswith('brand_'))
async def handle_brand(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤.

    Args:
        callback_query (types.CallbackQuery): Callback query –æ–±—ä–µ–∫—Ç.
    """
    await callback_query.message.edit_reply_markup(reply_markup=None)

    brand_id = callback_query.data.split('_')[1]
    response = requests.get(f"{API_BASE_URL}/brands/{brand_id}/vitamins/")
    products = response.json()

    await preparation_products(callback_query, products)

    back_button = [InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data='brands')]
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[back_button])
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ", reply_markup=back_keyboard)


@dp.message(lambda message: message.text == 'üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def handle_main_menu_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
            reply_markup=None
        )
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id - 2,
            reply_markup=None
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    inline_keyboard, _ = start_menu()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=inline_keyboard)


@dp.callback_query(lambda c: c.data in ['back_to_start', 'back_to_categories', 'back_to_brands'])
async def handle_back(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥".

    Args:
        callback_query (types.CallbackQuery): Callback query –æ–±—ä–µ–∫—Ç.
    """
    await callback_query.message.edit_reply_markup(reply_markup=None)

    if callback_query.data == 'back_to_start':
        inline_keyboard, _ = start_menu()
        await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=inline_keyboard)
    elif callback_query.data == 'back_to_categories':
        await handle_main_menu(callback_query)
    elif callback_query.data == 'back_to_brands':
        await handle_main_menu(callback_query)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())